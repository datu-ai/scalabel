// Proto definition for the deployment service.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "DeploymentServiceProto";
option objc_class_prefix = "HLW";

import "commons.proto";

package deployment_service;

service DeploymentService {
  // Create the Deployment task for a new project.
  rpc CreateDeploymentTask(CreateDeploymentTaskRequest)
      returns (CreateDeploymentTaskResponse) {}

  // Deploy a model on our cluster.
  rpc DeployModel(DeployRequest) returns (DeployResponse) {}

  // Perform inference on a deployed model via an endpoint.
  rpc PerformInference(InferenceRequest) returns (InferenceResponse) {}
}

enum ModelType {
  UNKNOWN_MODEL_TYPE = 0;

  // Detection Model
  RCNN = 1;
  RETINANET = 2;

  // Classification
  MOBILENET = 3;
  RESNET = 4;
};

message CreateDeploymentTaskRequest {
  string project_id = 1;

  commons.TaskType task_type = 2;

  repeated commons.Category categories = 3;

  repeated commons.Attribute attributes = 4;
}

message CreateDeploymentTaskResponse { string deployment_task_id = 1; }

message RegisterRequest {
  string project_id = 1;
  string trainer_id = 2;
}

message RegisterResponse { string message = 1; }

message DeployRequest {
  // Project ID
  string project_id = 1;

  // Deployment Task ID
  string deployment_task_id = 2;

  // Number of GPUs to serve this model.
  int32 num_gpus = 3;
}

message DeployResponse {
  string status = 1;
  string message = 2;

  // Deployment task ID.
  string deployment_task_id = 3;
}

message InferenceRequest {
  // Project Id to lookup the deployment information.
  string project_id = 1;

  // Deployment Task ID
  string deployment_task_id = 2;

  // Image list to run inference against.
  repeated Image image_list = 3;

  // Image urls (alternative to image list).
  repeated string url_list = 4;

  // Optional lists of bounding boxes for each image
  repeated BoxList box_lists = 5;
}

message InferenceResponse {
  string message = 1;
  repeated DetectionResult detection_result = 2;
  repeated ClassificationResult classification_result = 3;
  repeated PoseEstimationResult pose_estimation_result = 4;
  repeated PoseEstimationDenseResult pose_estimation_dense_result = 5;
  repeated InstanceSegmentationResult instance_segmentation_result = 6;
}

message BoxList {
  repeated Box boxes = 1;
}

message DetectionResult { repeated Detection detections = 1; }

message ClassificationResult {
  // Return the most confident class name.
  string class_name = 1;
  float confidence = 2;
}

message PoseEstimationResult { repeated PoseEstimation pose_estimation = 1; }
message PoseEstimationDenseResult {
  repeated PoseEstimationDense pose_estimation_dense = 1;
}
message InstanceSegmentationResult { repeated Polygon polygons = 1; }

message Image {
  int32 width = 1;
  int32 height = 2;
  int32 num_channel = 3;
  bytes image_data = 4;
  string image_path = 5;
}

message Detection {
  // The bounding box
  Box box = 1;

  // Class of the object in the bounding box.
  string class_name = 2;

  // Confidence of this detection.
  float confidence = 3;
}

message PoseEstimation {
  // The bounding box
  Box box = 1;

  // Confidence of this detection.
  float confidence = 2;

  // Pose keypoints
  bytes keypoints = 3;
}

message PoseEstimationDense {
  // The bounding box
  Box box = 1;

  // Confidence of this detection.
  float confidence = 2;

  // Dimensions for reconstruction.
  int32 channel = 3;
  int32 height = 4;
  int32 width = 5;

  // Dense Pose points
  bytes pose = 6;
}

message Box {
  // Bottom left
  Point bottom_left = 1;
  // Top right
  Point top_right = 2;
}

message Point {
  // A single point
  float x = 1;
  float y = 2;
}

message Polygon {
  // List of points of polygon
  repeated Point points = 1;
}
